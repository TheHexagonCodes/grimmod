#![allow(clippy::approx_constant)]

use std::sync::Mutex;

use crate::raw::gl;

pub struct StencilBuffer {
    renderbuffer: gl::Uint,
    n_vertices: usize,
    vao: gl::Uint,
    vbo: gl::Uint,
    width: gl::Int,
    height: gl::Int,
}

impl StencilBuffer {
    pub const fn new(
        renderbuffer: gl::Uint,
        n_vertices: usize,
        vao: gl::Uint,
        vbo: gl::Uint,
        width: gl::Int,
        height: gl::Int,
    ) -> StencilBuffer {
        StencilBuffer {
            renderbuffer,
            n_vertices,
            vao,
            vbo,
            width,
            height,
        }
    }
}

static STENCIL_BUFFER: Mutex<StencilBuffer> = Mutex::new(StencilBuffer::new(0, 0, 0, 0, 0, 0));

pub fn triangles_for(name: &str) -> Option<&'static [f32]> {
    if name == "cb_1_intha" {
        Some(&CB_1_TRIANGLES)
    } else if name == "ew_0_ishla" {
        Some(&EW_0_TRIANGLES)
    } else if name == "hb_0_blcsk" {
        Some(&HB_0_TRIANGLES)
    } else if name == "lx_0_dokla" {
        Some(&LX_0_TRIANGLES)
    } else if name == "lx_2_extoh" {
        Some(&LX_2_TRIANGLES)
    } else if name == "se_0_estws" {
        Some(&SE_0_TRIANGLES)
    } else {
        None
    }
}

pub fn bind_for(name: &str) {
    let mut stencil_buffer = STENCIL_BUFFER.lock().unwrap();
    if let Some(triangles) = triangles_for(name) {
        bind_stencil_vos(&mut stencil_buffer, triangles);
    }
}

pub fn create_stencil_buffer() {
    let mut stencil_buffer = 0;
    gl::gen_renderbuffers(1, &mut stencil_buffer);
    gl::bind_renderbuffer(gl::RENDERBUFFER, stencil_buffer);
    gl::renderbuffer_storage(gl::RENDERBUFFER, gl::DEPTH24_STENCIL8, 640, 480);
    gl::bind_renderbuffer(gl::RENDERBUFFER, 0);
    let (vao, vbo) = create_stencil_vao();
    *STENCIL_BUFFER.lock().unwrap() = StencilBuffer::new(stencil_buffer, 0, vao, vbo, 640, 480);
}

fn create_stencil_vao() -> (gl::Uint, gl::Uint) {
    let mut previous_vao = 0;
    let mut vao = 0;
    let mut vbo = 0;

    gl::get_integerv(gl::VERTEX_ARRAY_BINDING, &mut previous_vao);
    gl::gen_vertex_arrays(1, &mut vao);
    gl::gen_buffers(1, &mut vbo);
    gl::bind_vertex_array(vao);

    gl::bind_buffer(gl::ARRAY_BUFFER, vbo);

    let vertices_size = 2 * std::mem::size_of::<f32>() as gl::Sizei;
    gl::vertex_attrib_pointer(0, 2, gl::FLOAT, 0, vertices_size, std::ptr::null());
    gl::enable_vertex_attrib_array(0);

    gl::bind_buffer(gl::ARRAY_BUFFER, 0);
    gl::bind_vertex_array(previous_vao as gl::Uint);

    (vao, vbo)
}

pub fn bind_stencil_vos(stencil_buffer: &mut StencilBuffer, verticies: &'static [f32]) {
    stencil_buffer.n_vertices = verticies.len();
    gl::bind_buffer(gl::ARRAY_BUFFER, stencil_buffer.vbo);
    gl::buffer_data(
        gl::ARRAY_BUFFER,
        std::mem::size_of_val(verticies) as gl::Sizei,
        verticies.as_ptr() as *mut _,
        gl::STATIC_DRAW,
    );
}

pub fn attach_stencil_buffer(stencil_buffer: &mut StencilBuffer, width: gl::Int, height: gl::Int) {
    gl::bind_renderbuffer(gl::RENDERBUFFER, stencil_buffer.renderbuffer);
    if (width, height) != (stencil_buffer.width, stencil_buffer.height) {
        gl::renderbuffer_storage(gl::RENDERBUFFER, gl::DEPTH24_STENCIL8, width, height);
        stencil_buffer.width = width;
        stencil_buffer.height = height;
    }
    gl::framebuffer_renderbuffer(
        gl::FRAMEBUFFER,
        gl::STENCIL_ATTACHMENT,
        gl::RENDERBUFFER,
        stencil_buffer.renderbuffer,
    );
    gl::bind_renderbuffer(gl::RENDERBUFFER, 0);
}

pub fn detach_stencil_buffer() {
    gl::disable(gl::STENCIL_TEST);
    gl::framebuffer_renderbuffer(gl::FRAMEBUFFER, gl::STENCIL_ATTACHMENT, gl::RENDERBUFFER, 0);
}

pub fn with_stencil<F: Fn()>(draw: F) {
    let mut stencil_buffer = STENCIL_BUFFER.lock().unwrap();
    let mut previous_vao = 0;
    let mut viewport: [gl::Int; 4] = [0; 4];
    gl::get_integerv(gl::VERTEX_ARRAY_BINDING, &mut previous_vao);
    gl::get_integerv(gl::VIEWPORT, viewport.as_mut_ptr());
    let [_, _, viewport_width, viewport_height] = viewport;

    attach_stencil_buffer(&mut stencil_buffer, viewport_width, viewport_height);
    draw_stencil_mask(&stencil_buffer);
    drop(stencil_buffer);

    gl::bind_vertex_array(previous_vao as u32);
    draw();

    detach_stencil_buffer();
}

pub fn draw_stencil_mask(stencil_buffer: &StencilBuffer) {
    gl::clear(gl::STENCIL_BUFFER_BIT);

    gl::enable(gl::STENCIL_TEST);

    gl::stencil_func(gl::ALWAYS, 1, 0xFF);
    gl::stencil_op(gl::KEEP, gl::REPLACE, gl::REPLACE);
    gl::stencil_mask(0xFF);
    gl::color_mask(0, 0, 0, 0);
    gl::depth_mask(0);

    gl::bind_vertex_array(stencil_buffer.vao);
    gl::draw_arrays(
        gl::TRIANGLES,
        0,
        stencil_buffer.n_vertices as gl::Sizei / 2 as gl::Sizei,
    );
    gl::color_mask(1, 1, 1, 1);
    gl::depth_mask(1);

    gl::stencil_func(gl::EQUAL, 1, 0xFF);
    gl::stencil_op(gl::KEEP, gl::KEEP, gl::KEEP);
}

#[rustfmt::skip]
static HB_0_TRIANGLES: [f32; 864] = [
    // bottom left
    -1.0, -1.0, -0.641, -0.36, -0.905, -0.308,
    -0.395, -0.49, -0.593, -0.34, -0.641, -0.36,
    -0.402, -0.416, -0.43, -0.353, -0.593, -0.34,
    -0.641, -0.36, -1.0, -1.0, -0.337, -0.583,
    -1.0, -0.31, -1.0, -1.0, -0.905, -0.308,
    -0.768, -0.298, -0.791, -0.183, -0.905, -0.308,
    -0.768, -0.298, -0.905, -0.308, -0.641, -0.36,
    -0.685, -0.313, -0.768, -0.298, -0.641, -0.36,
    0.184, -0.801, 0.052, -0.8, 0.483, -1.0,
    0.483, -1.0, 0.309, -0.771, 0.184, -0.801,
    -0.113, -0.756, -1.0, -1.0, 0.052, -0.8,
    -0.395, -0.49, -0.402, -0.416, -0.593, -0.34,
    -0.257, -0.663, -0.337, -0.583, -1.0, -1.0,
    -0.113, -0.756, -0.257, -0.663, -1.0, -1.0,
    -0.395, -0.49, -0.641, -0.36, -0.337, -0.583,
    0.052, -0.8, -1.0, -1.0, 0.483, -1.0,

    // bottom right
    0.659, -0.163, 0.64, -0.245, 0.875, -0.361,
    0.659, -0.108, 0.659, -0.163, 0.875, -0.361,
    0.633, -0.034, 0.649, -0.071, 1.0, 0.182,
    0.607, 0.011, 0.633, -0.034, 1.0, 0.182,
    0.659, -0.108, 1.0, 0.182, 0.649, -0.071,
    0.986, -0.486, 1.0, -0.501, 0.989, -0.441,
    0.989, -0.441, 1.0, -0.501, 1.0, 0.182,
    0.875, -0.361, 1.0, 0.182, 0.659, -0.108,
    1.0, 0.182, 0.875, -0.361, 0.989, -0.441,
    0.875, -0.361, 0.64, -0.245, 0.843, -0.386,

    // top left (1)
    -0.947, 0.404, -1.0, 0.259, -0.866, 0.254,
    -0.776, 0.35, -0.826, 0.274, -0.785, 0.272,
    -0.826, 0.274, -0.897, 0.412, -0.866, 0.254,
    -0.752, 0.311, -0.757, 0.315, -0.785, 0.272,
    -0.735, 0.254, -0.785, 0.272, -0.781, 0.254,
    -0.785, 0.272, -0.757, 0.315, -0.776, 0.35,
    -0.752, 0.311, -0.785, 0.272, -0.743, 0.309,
    -0.755, 0.325, -0.776, 0.35, -0.757, 0.315,
    -1.0, 0.407, -1.0, 0.259, -0.947, 0.404,
    -0.882, 0.437, -0.897, 0.412, -0.771, 0.392,
    -0.866, 0.254, -0.897, 0.412, -0.947, 0.404,
    -0.771, 0.392, -0.788, 0.45, -0.882, 0.437,
    -0.788, 0.45, -0.755, 0.404, -0.695, 0.46,
    -0.755, 0.404, -0.788, 0.45, -0.771, 0.392,
    -0.771, 0.392, -0.897, 0.412, -0.776, 0.35,
    -0.776, 0.35, -0.897, 0.412, -0.826, 0.274,
    -0.732, 0.324, -0.721, 0.25, -0.723, 0.335,
    -0.735, 0.254, -0.743, 0.309, -0.785, 0.272,
    -0.63, 0.247, -0.618, 0.259, -0.62, 0.296,
    -0.723, 0.335, -0.721, 0.25, -0.62, 0.296,
    -0.63, 0.247, -0.62, 0.296, -0.721, 0.25,
    -0.596, 0.339, -0.62, 0.296, -0.592, 0.317,
    -0.718, 0.377, -0.721, 0.355, -0.595, 0.357,
    -0.733, 0.4, -0.718, 0.377, -0.695, 0.46,
    -0.723, 0.335, -0.62, 0.296, -0.721, 0.355,
    -0.718, 0.377, -0.595, 0.357, -0.602, 0.397,
    -0.61, 0.411, -0.695, 0.46, -0.718, 0.377,
    -0.718, 0.377, -0.602, 0.397, -0.61, 0.411,
    -0.595, 0.357, -0.721, 0.355, -0.596, 0.339,
    -0.62, 0.296, -0.596, 0.339, -0.721, 0.355,
    -0.733, 0.4, -0.695, 0.46, -0.755, 0.404,

    // top left (2)
    -0.578, 0.325, -0.558, 0.315, -0.526, 0.377,
    -0.526, 0.377, -0.548, 0.302, -0.472, 0.34,
    -0.558, 0.315, -0.548, 0.302, -0.526, 0.377,
    -0.591, 0.399, -0.591, 0.367, -0.526, 0.377,
    -0.526, 0.377, -0.588, 0.414, -0.591, 0.399,
    -0.591, 0.367, -0.578, 0.325, -0.526, 0.377,
    -0.548, 0.302, -0.536, 0.242, -0.472, 0.34,
    -0.351, 0.171, -0.405, 0.315, -0.536, 0.242,
    -0.298, 0.171, -0.29, 0.139, -0.242, 0.172,
    -0.351, 0.171, -0.298, 0.171, -0.313, 0.275,
    -0.536, 0.242, -0.405, 0.315, -0.472, 0.34,
    -0.313, 0.275, -0.405, 0.315, -0.351, 0.171,
    -0.242, 0.172, -0.313, 0.275, -0.298, 0.171,
    -0.536, 0.242, -0.371, 0.144, -0.351, 0.171,

    // top right
    -0.202, 0.525, -0.068, 0.422, -0.058, 0.44,
    -0.043, 0.447, -0.041, 0.48, -0.058, 0.44,
    -0.046, 0.522, -0.058, 0.44, -0.041, 0.48,
    -0.278, 0.575, -0.285, 0.537, -0.265, 0.532,
    -0.046, 0.522, -0.202, 0.525, -0.058, 0.44,
    -0.046, 0.522, -0.055, 0.544, -0.202, 0.525,
    -0.278, 0.575, -0.265, 0.532, -0.242, 0.537,
    0.028, 0.28, 0.047, 0.279, -0.011, 0.382,
    0.067, 0.259, 0.069, 0.215, 0.13, 0.215,
    -0.011, 0.439, 0.047, 0.279, 0.16, 0.584,
    -0.035, 0.514, -0.03, 0.445, -0.011, 0.439,
    -0.035, 0.514, -0.011, 0.439, -0.018, 0.534,
    -0.011, 0.439, -0.011, 0.382, 0.047, 0.279,
    0.008, 0.572, -0.018, 0.534, -0.011, 0.439,
    0.008, 0.572, -0.011, 0.439, 0.16, 0.584,
    -0.231, 0.579, -0.278, 0.575, -0.229, 0.554,
    -0.231, 0.579, -0.088, 0.592, -0.228, 0.642,
    -0.214, 0.549, -0.231, 0.579, -0.229, 0.554,
    -0.278, 0.575, -0.242, 0.537, -0.229, 0.554,
    -0.237, 1.0, -0.241, 0.915, -0.101, 1.0,
    -0.258, 0.87, -0.109, 0.897, -0.241, 0.915,
    -0.258, 0.87, -0.235, 0.789, -0.109, 0.897,
    -0.235, 0.789, -0.243, 0.706, -0.099, 0.729,
    -0.099, 0.729, -0.243, 0.706, -0.228, 0.642,
    -0.214, 0.549, -0.202, 0.525, -0.088, 0.592,
    -0.088, 0.592, -0.202, 0.525, -0.055, 0.544,
    -0.088, 0.592, -0.047, 0.564, -0.025, 0.564,
    -0.088, 0.592, -0.055, 0.544, -0.047, 0.564,
    -0.018, 0.534, 0.008, 0.572, -0.025, 0.564,
    0.008, 0.572, -0.088, 0.592, -0.025, 0.564,
    -0.101, 1.0, -0.241, 0.915, -0.109, 0.897,
    -0.099, 0.729, -0.228, 0.642, -0.088, 0.592,
    -0.109, 0.897, -0.235, 0.789, -0.094, 0.807,
    -0.099, 0.729, -0.094, 0.807, -0.235, 0.789,
    -0.088, 0.592, -0.231, 0.579, -0.214, 0.549,
    0.16, 0.584, 0.047, 0.279, 0.067, 0.259,
    0.227, 0.2, 0.304, 0.184, 0.309, 0.209,
    0.227, 0.2, 0.16, 0.584, 0.067, 0.259,
    0.357, 0.222, 0.16, 0.584, 0.309, 0.209,
    0.227, 0.2, 0.309, 0.209, 0.16, 0.584,
    0.16, 0.584, 0.357, 0.222, 0.469, 0.249,
    0.469, 0.249, 0.357, 0.222, 0.378, 0.205,
    0.378, 0.205, 0.462, 0.23, 0.469, 0.249,
    0.507, 0.259, 0.474, 0.68, 0.469, 0.249,
    0.527, 0.247, 0.597, 0.27, 0.601, 0.286,
    0.629, 0.296, 0.654, 0.287, 0.807, 0.344,
    0.507, 0.259, 0.601, 0.286, 0.474, 0.68,
    0.527, 0.247, 0.601, 0.286, 0.507, 0.259,
    0.802, 0.329, 0.807, 0.344, 0.654, 0.287,
    0.897, 0.372, 0.829, 0.352, 0.857, 0.345,
    0.897, 0.372, 0.857, 0.345, 0.894, 0.357,
    0.629, 0.296, 0.807, 0.344, 0.665, 0.684,
    0.629, 0.296, 0.474, 0.68, 0.601, 0.286,
    0.829, 0.352, 0.665, 0.684, 0.807, 0.344,
    0.135, 0.615, 0.16, 0.584, 0.164, 0.66,
    0.164, 0.66, 0.474, 0.68, 0.172, 0.832,
    0.474, 0.68, 0.164, 0.66, 0.16, 0.584,
    0.469, 0.249, 0.474, 0.68, 0.16, 0.584,
    0.149, 0.882, 0.172, 0.832, 0.184, 0.93,
    0.184, 0.93, 0.385, 1.0, 0.184, 1.0,
    0.385, 1.0, 0.184, 0.93, 0.172, 0.832,
    0.172, 0.832, 0.474, 0.68, 0.385, 1.0,
    0.474, 0.68, 0.488, 0.999, 0.385, 1.0,
    0.897, 0.372, 0.92, 0.375, 1.0, 0.622,
    1.0, 0.385, 1.0, 0.622, 0.92, 0.375,
    1.0, 0.385, 0.92, 0.375, 0.947, 0.367,
    0.897, 0.372, 1.0, 0.622, 0.851, 0.714,
    0.851, 0.714, 1.0, 1.0, 0.946, 1.0,
    1.0, 1.0, 0.851, 0.714, 1.0, 0.622,
    0.829, 0.352, 0.851, 0.714, 0.665, 0.684,
    0.665, 0.684, 0.474, 0.68, 0.629, 0.296,
    0.851, 0.714, 0.829, 0.352, 0.897, 0.372,
    0.067, 0.259, 0.13, 0.215, 0.227, 0.2,
];

#[rustfmt::skip]
const SE_0_TRIANGLES: [f32; 426] = [
    // left
    -1.0, -0.675, -0.883, -0.554, -0.836, -0.365,
    -0.836, -0.365, -0.883, -0.554, -0.816, -0.448,
    -1.0, -0.675, -0.836, -0.365, -0.842, -0.283,
    -0.843, -0.129, -0.866, -0.106, -0.827, -0.221,
    -0.842, -0.283, -0.866, -0.106, -1.0, -0.675,
    -0.842, -0.283, -0.827, -0.221, -0.866, -0.106,
    -1.0, -0.675, -0.866, -0.106, -1.0, 0.74,
    -0.78, -0.149, -0.827, -0.221, -0.751, -0.149,
    -0.827, -0.221, -0.78, -0.149, -0.825, -0.133,
    -0.713, -0.148, -0.751, -0.149, -0.827, -0.221,
    -0.827, -0.221, -0.825, -0.133, -0.843, -0.129,
    -0.82, -0.053, -0.798, -0.083, -0.752, -0.098,
    -0.679, 0.267, -1.0, 0.74, -0.842, -0.058,
    -0.842, -0.058, -1.0, 0.74, -0.863, -0.081,
    -0.82, -0.053, -0.675, 0.245, -0.842, -0.058,
    -0.752, -0.098, -0.798, -0.083, -0.782, -0.096,
    -0.863, -0.081, -1.0, 0.74, -0.866, -0.106,
    -0.82, -0.053, -0.61, -0.03, -0.662, 0.234,
    -0.723, -0.094, -0.61, -0.03, -0.82, -0.053,
    -0.662, 0.234, -0.675, 0.245, -0.82, -0.053,
    -1.0, 0.74, -0.679, 0.267, -0.675, 0.296,
    -0.676, 0.742, -1.0, 0.74, -0.655, 0.314,
    -0.842, -0.058, -0.675, 0.245, -0.679, 0.267,
    -0.675, 0.296, -0.655, 0.314, -1.0, 0.74,
    -0.723, -0.094, -0.82, -0.053, -0.752, -0.098,
    -0.461, 0.052, -0.593, 0.227, -0.56, -0.01,
    -0.111, 0.222, -0.606, 0.265, -0.593, 0.227,
    -0.461, 0.052, -0.56, -0.01, -0.464, 0.036,
    -0.61, -0.03, -0.647, 0.23, -0.662, 0.234,
    -0.422, 0.057, -0.111, 0.222, -0.593, 0.227,
    -0.593, 0.227, -0.437, 0.061, -0.422, 0.057,
    -0.111, 0.222, -0.4, 0.614, -0.606, 0.265,
    -0.056, 0.242, -0.012, 0.239, -0.007, 0.291,
    -0.4, 0.614, -0.111, 0.222, -0.102, 0.234,
    -0.437, 0.061, -0.593, 0.227, -0.461, 0.052,
    -0.012, 0.312, -0.102, 0.234, -0.056, 0.242,
    -0.513, 0.617, -0.655, 0.314, -0.64, 0.311,
    -0.4, 0.614, -0.64, 0.311, -0.606, 0.265,
    -0.4, 0.614, -0.102, 0.234, -0.061, 0.522,
    -0.64, 0.311, -0.4, 0.614, -0.513, 0.617,
    -0.022, 0.649, -0.4, 0.614, -0.061, 0.522,
    -0.022, 0.649, -0.061, 0.522, -0.036, 0.549,
    -0.655, 0.314, -0.513, 0.617, -0.676, 0.742,
    -0.012, 0.312, -0.007, 0.342, -0.102, 0.234,
    -0.061, 0.522, -0.007, 0.342, 0.059, 0.409,
    -0.036, 0.549, 0.018, 0.582, -0.022, 0.649,
    -0.036, 0.549, -0.001, 0.555, 0.018, 0.582,
    -0.061, 0.522, -0.102, 0.234, -0.007, 0.342,
    -0.056, 0.242, -0.007, 0.291, -0.012, 0.312,

    // right
    0.244, -0.346, 0.477, -0.179, 0.387, -0.216,
    0.14, -0.568, 1.0, -1.0, 0.244, -0.346,
    0.852, 0.615, 0.312, 0.479, 0.344, 0.455,
    0.14, -0.568, 0.113, -1.0, 1.0, -1.0,
    0.072, 0.764, 0.072, 0.655, 0.218, 0.549,
    0.218, 0.549, 0.072, 0.655, 0.122, 0.574,
    0.218, 0.549, 0.247, 0.519, 0.312, 0.479,
    0.072, 0.764, 0.218, 0.549, 0.852, 0.615,
    0.312, 0.479, 0.852, 0.615, 0.218, 0.549,
    0.344, 0.455, 0.374, 0.424, 0.852, 0.615,
    0.395, 0.065, 0.448, 0.022, 0.439, 0.132,
    0.51, 0.164, 0.439, 0.132, 0.448, 0.022,
    0.477, -0.179, 1.0, -1.0, 0.49, -0.05,
    1.0, -1.0, 0.477, -0.179, 0.244, -0.346,
    0.51, 0.164, 0.448, 0.022, 0.49, -0.05,
    1.0, 0.645, 0.49, -0.05, 1.0, -1.0,
    0.852, 0.615, 0.408, 0.38, 0.428, 0.322,
    0.51, 0.164, 0.852, 0.615, 0.51, 0.224,
    0.852, 0.615, 0.51, 0.164, 1.0, 0.645,
    0.51, 0.224, 0.852, 0.615, 0.428, 0.322,
    0.51, 0.164, 0.49, -0.05, 1.0, 0.645,
    0.408, 0.38, 0.852, 0.615, 0.374, 0.424,
];

#[rustfmt::skip]
static EW_0_TRIANGLES: [f32; 882] = [
    // left
    -1.0, -1.0, -0.562, 0.139, -0.573, 0.156,
    -0.533, 0.122, -0.562, 0.139, -0.402, 0.007,
    -1.0, -1.0, -0.573, 0.156, -0.597, 0.269,
    -0.533, 0.122, -0.541, 0.142, -0.562, 0.139,
    -0.462, 0.074, -0.512, 0.14, -0.533, 0.122,
    -0.512, 0.14, -0.459, 0.122, -0.492, 0.164,
    -0.597, 0.269, -0.571, 0.172, -0.582, 0.254,
    -0.571, 0.172, -0.597, 0.269, -0.573, 0.156,
    -0.582, 0.254, -0.571, 0.172, -0.565, 0.224,
    -0.565, 0.224, -0.56, 0.255, -0.582, 0.254,
    -0.562, 0.139, -0.31, -0.153, -0.402, 0.007,
    -1.0, -1.0, -0.597, 0.269, -1.0, 1.0,
    -0.402, 0.007, -0.413, 0.047, -0.444, 0.065,
    -0.31, -0.153, -0.388, 0.004, -0.402, 0.007,
    -0.388, 0.004, -0.348, 0.031, -0.378, 0.019,
    -0.348, 0.031, -0.388, 0.004, -0.319, 0.021,
    -0.319, 0.021, -0.388, 0.004, -0.314, -0.044,
    -0.492, 0.164, -0.459, 0.122, -0.476, 0.167,
    -0.459, 0.122, -0.512, 0.14, -0.462, 0.074,
    -0.444, 0.065, -0.433, 0.094, -0.442, 0.089,
    -0.433, 0.094, -0.444, 0.065, -0.413, 0.047,
    -0.462, 0.074, -0.402, 0.007, -0.444, 0.065,
    -0.402, 0.007, -0.462, 0.074, -0.533, 0.122,
    -1.0, -1.0, -0.31, -0.153, -0.562, 0.139,
    -0.592, 0.28, -0.566, 0.297, -0.567, 0.325,
    -0.592, 0.28, -0.567, 0.325, -0.591, 0.514,
    -0.552, 0.332, -0.536, 0.302, -0.507, 0.33,
    -0.485, 0.395, -0.552, 0.332, -0.507, 0.33,
    -0.506, 0.565, -1.0, 1.0, -0.591, 0.514,
    -0.597, 0.269, -0.591, 0.514, -1.0, 1.0,
    -0.506, 0.565, -0.591, 0.514, -0.586, 0.515,
    -0.586, 0.515, -0.483, 0.417, -0.506, 0.565,
    -0.485, 0.395, -0.507, 0.33, -0.485, 0.34,
    -0.506, 0.565, -0.5, 0.567, -1.0, 1.0,
    -0.552, 0.332, -0.483, 0.417, -0.586, 0.515,
    -1.0, 1.0, -0.5, 0.567, -0.411, 0.599,
    -0.591, 0.514, -0.597, 0.269, -0.592, 0.28,
    -0.472, 0.384, -0.451, 0.345, -0.417, 0.349,
    -0.417, 0.349, -0.392, 0.404, -0.472, 0.384,
    -0.5, 0.567, -0.392, 0.404, -0.411, 0.599,
    -0.411, 0.599, -0.405, 0.599, -1.0, 1.0,
    -0.38, 0.417, -0.358, 0.405, -0.339, 0.445,
    -0.392, 0.404, -0.5, 0.567, -0.472, 0.384,
    -0.321, 0.46, -0.405, 0.599, -0.339, 0.445,
    -0.339, 0.445, -0.358, 0.405, -0.339, 0.402,
    -0.405, 0.599, -0.38, 0.417, -0.339, 0.445,
    -0.405, 0.599, -0.321, 0.46, -0.24, 0.49,
    -0.318, 0.424, -0.339, 0.445, -0.339, 0.402,
    -0.485, 0.395, -0.483, 0.417, -0.552, 0.332,
    -1.0, 1.0, -0.405, 0.599, 0.218, 1.0,
    -0.31, -0.153, -1.0, -1.0, -0.286, -0.185,
    -0.31, -0.153, -0.291, -0.123, -0.314, -0.044,
    -0.242, -0.173, -0.192, -0.206, -0.213, -0.169,
    -0.192, -0.206, -0.242, -0.173, -0.27, -0.189,
    -0.286, -0.185, -0.006, -0.396, -0.27, -0.189,
    -0.281, -0.05, -0.314, -0.044, -0.291, -0.123,
    -0.24, 0.49, -0.209, 0.5, -0.202, 0.519,
    -0.24, 0.49, -0.321, 0.46, -0.26, 0.455,
    -0.202, 0.519, -0.405, 0.599, -0.24, 0.49,
    -0.31, -0.153, -0.314, -0.044, -0.388, 0.004,
    -0.006, -0.396, 0.088, -0.453, 0.083, -0.379,
    0.088, -0.453, -0.006, -0.396, 0.13, -0.53,
    0.13, -0.53, 0.193, -1.0, 0.194, -0.605,
    0.193, -1.0, 0.13, -0.53, -0.006, -0.396,
    -0.27, -0.189, -0.006, -0.396, -0.071, -0.296,
    -0.092, -0.26, -0.192, -0.206, -0.071, -0.296,
    -0.27, -0.189, -0.071, -0.296, -0.192, -0.206,
    -0.286, -0.185, -1.0, -1.0, -0.006, -0.396,
    0.193, -1.0, -0.006, -0.396, -1.0, -1.0,
    -0.16, 0.5, -0.083, 0.564, -0.202, 0.519,
    -0.16, 0.5, -0.078, 0.552, -0.083, 0.564,
    -0.202, 0.519, -0.083, 0.564, -0.074, 0.577,
    -0.027, 0.549, -0.016, 0.527, 0.027, 0.514,
    0.027, 0.514, 0.071, 0.582, -0.027, 0.549,
    0.071, 0.522, 0.071, 0.582, 0.027, 0.514,
    -0.027, 0.549, 0.082, 0.605, -0.074, 0.577,
    0.082, 0.605, -0.027, 0.549, 0.071, 0.582,
    -0.074, 0.577, 0.082, 0.605, 0.095, 0.744,
    0.099, 0.742, 0.097, 0.607, 0.107, 0.607,
    0.092, 0.61, 0.095, 0.744, 0.082, 0.605,
    0.095, 0.744, -0.405, 0.599, -0.074, 0.577,
    0.095, 0.744, 0.218, 1.0, -0.405, 0.599,
    0.138, 0.562, 0.154, 0.575, 0.114, 0.591,
    0.172, 0.571, 0.179, 0.554, 0.218, 0.527,
    0.172, 0.571, 0.218, 0.527, 0.166, 0.712,
    0.099, 0.742, 0.107, 0.607, 0.163, 0.714,
    0.107, 0.607, 0.114, 0.591, 0.154, 0.575,
    0.163, 0.714, 0.107, 0.607, 0.154, 0.575,
    0.16, 0.575, 0.172, 0.571, 0.166, 0.712,
    0.163, 0.714, 0.218, 1.0, 0.099, 0.742,
    0.218, 1.0, 0.163, 0.714, 0.166, 0.712,
    0.218, 0.527, 0.218, 1.0, 0.166, 0.712,
    0.099, 0.742, 0.218, 1.0, 0.095, 0.744,
    0.138, 0.562, 0.114, 0.591, 0.113, 0.51,
    0.113, 0.51, 0.134, 0.524, 0.138, 0.562,
    -0.202, 0.519, -0.074, 0.577, -0.405, 0.599,

    // right
    0.178, -1.0, 0.254, -0.679, 0.179, -0.669,
    0.291, -0.663, 0.254, -0.679, 0.319, -0.661,
    0.254, -0.679, 0.178, -1.0, 0.319, -0.661,
    1.0, -1.0, 0.4, -0.591, 0.319, -0.661,
    0.4, -0.591, 0.49, -0.47, 0.417, -0.52,
    0.319, -0.661, 0.178, -1.0, 1.0, -1.0,
    0.223, 0.522, 0.263, 0.532, 0.193, 0.54,
    0.193, 1.0, 0.193, 0.54, 0.263, 0.532,
    0.263, 0.532, 0.301, 0.512, 0.193, 1.0,
    0.399, 0.449, 0.399, 0.407, 0.429, 0.39,
    0.301, 0.512, 0.375, 0.479, 0.193, 1.0,
    0.272, 0.515, 0.301, 0.512, 0.263, 0.532,
    0.375, 0.479, 1.0, 1.0, 0.193, 1.0,
    0.399, 0.449, 0.47, 0.389, 0.375, 0.479,
    0.399, 0.449, 0.429, 0.39, 0.47, 0.389,
    0.519, -0.37, 0.49, -0.47, 0.553, -0.334,
    0.557, -0.233, 0.553, -0.334, 0.574, -0.221,
    0.49, -0.47, 1.0, -1.0, 0.553, -0.334,
    0.574, -0.221, 1.0, -1.0, 0.597, -0.146,
    1.0, -1.0, 0.574, -0.221, 0.553, -0.334,
    0.597, -0.146, 0.625, -0.054, 0.604, -0.106,
    0.625, -0.054, 0.597, -0.146, 1.0, -1.0,
    1.0, -1.0, 0.634, 0.122, 0.625, -0.054,
    0.49, -0.47, 0.4, -0.591, 1.0, -1.0,
    0.524, 0.345, 0.525, 0.322, 0.544, 0.309,
    0.47, 0.389, 0.479, 0.374, 0.524, 0.345,
    0.524, 0.345, 1.0, 1.0, 0.47, 0.389,
    0.608, 0.225, 0.634, 0.122, 1.0, 1.0,
    0.549, 0.287, 0.608, 0.225, 0.544, 0.309,
    0.544, 0.309, 0.608, 0.225, 1.0, 1.0,
    0.544, 0.309, 1.0, 1.0, 0.524, 0.345,
    0.634, 0.122, 1.0, -1.0, 1.0, 1.0,
    0.47, 0.389, 1.0, 1.0, 0.375, 0.479,

    // pool
    -0.526, 0.224, -0.512, 0.167, -0.478, 0.181,
    -0.526, 0.224, -0.467, 0.2, -0.511, 0.259,
    -0.478, 0.181, -0.467, 0.2, -0.526, 0.224,
    -0.444, 0.259, -0.511, 0.259, -0.467, 0.2,
    -0.533, 0.287, -0.511, 0.259, -0.497, 0.319,
    -0.476, 0.315, -0.497, 0.319, -0.511, 0.259,
    -0.444, 0.259, -0.476, 0.315, -0.511, 0.259,
    -0.476, 0.315, -0.432, 0.296, -0.454, 0.32,
    -0.453, 0.207, -0.444, 0.259, -0.467, 0.2,
    -0.436, 0.179, -0.433, 0.132, -0.381, 0.166,
    -0.426, 0.2, -0.453, 0.207, -0.436, 0.179,
    -0.436, 0.179, -0.381, 0.166, -0.426, 0.2,
    -0.381, 0.166, -0.433, 0.132, -0.413, 0.119,
    -0.426, 0.2, -0.381, 0.166, -0.392, 0.207,
    -0.426, 0.2, -0.444, 0.259, -0.453, 0.207,
    -0.454, 0.32, -0.432, 0.296, -0.446, 0.332,
    -0.432, 0.296, -0.476, 0.315, -0.444, 0.259,
    -0.432, 0.296, -0.418, 0.33, -0.446, 0.332,
];

#[rustfmt::skip]
static LX_0_TRIANGLES: [f32; 306] = [
    // lighthouse and water
    0.048, -0.199, 0.053, -0.201, 0.059, -0.11,
    0.053, -0.201, 0.048, -0.199, 0.099, -0.628,
    0.053, -0.201, 0.065, -0.096, 0.059, -0.11,
    0.065, -0.08, 0.077, -0.073, 0.111, -0.011,
    0.065, -0.096, 0.065, -0.08, 0.059, -0.11,
    0.059, -0.11, 0.065, -0.08, -0.083, 0.009,
    0.234, -0.551, 0.099, -0.628, 0.233, -0.61,
    0.328, -0.223, 0.133, -0.225, 0.284, -0.538,
    0.234, -0.551, 0.284, -0.538, 0.133, -0.225,
    0.133, -0.225, 0.099, -0.628, 0.234, -0.551,
    0.133, -0.225, 0.053, -0.201, 0.099, -0.628,
    0.077, -0.073, 0.111, -0.064, 0.111, -0.011,
    0.119, 0.059, -0.083, 0.009, 0.111, -0.011,
    0.152, 0.284, -0.561, 0.149, -0.083, 0.009,
    -0.554, 0.051, -0.083, 0.009, -0.561, 0.149,
    -0.561, 0.857, -0.561, 0.149, 0.152, 0.284,
    0.119, 0.059, 0.111, -0.011, 0.118, -0.006,
    -0.083, 0.009, 0.065, -0.08, 0.111, -0.011,
    0.119, 0.059, 0.128, 0.065, 0.128, 0.122,
    0.119, 0.059, 0.128, 0.122, -0.083, 0.009,
    0.137, 0.125, 0.137, 0.169, 0.128, 0.122,
    0.143, 0.177, 0.152, 0.284, 0.137, 0.169,
    0.152, 0.284, -0.083, 0.009, 0.137, 0.169,
    0.137, 0.169, -0.083, 0.009, 0.128, 0.122,
    -0.561, 0.857, 0.152, 0.284, 0.327, 0.291,
    0.538, -0.55, 0.284, -0.538, 0.313, -0.568,
    0.609, -0.294, 0.538, -0.55, 0.573, -0.565,
    0.534, -0.273, 0.538, -0.55, 0.553, -0.276,
    0.538, -0.55, 0.477, -0.261, 0.284, -0.538,
    0.609, -0.294, 0.553, -0.276, 0.538, -0.55,
    0.573, -0.565, 0.592, -0.591, 0.81, -0.391,
    0.477, -0.261, 0.538, -0.55, 0.534, -0.273,
    0.779, -0.34, 0.81, -0.391, 0.81, -0.348,
    0.81, -0.391, 0.779, -0.34, 0.698, -0.31,
    0.573, -0.565, 0.698, -0.31, 0.609, -0.294,
    0.768, -0.328, 0.769, -0.296, 0.698, -0.31,
    0.779, -0.34, 0.768, -0.328, 0.698, -0.31,
    0.553, -0.276, 0.609, -0.294, 0.608, -0.266,
    0.698, -0.31, 0.573, -0.565, 0.81, -0.391,
    0.328, -0.223, 0.284, -0.538, 0.361, -0.235,
    0.424, -0.228, 0.361, -0.235, 0.477, -0.261,
    1.0, -0.139, 0.353, 0.28, 0.385, -0.053,
    0.385, -0.053, 0.353, 0.28, 0.343, 0.252,
    0.327, 0.291, 0.353, 0.28, 1.0, 0.857,
    0.452, -0.213, 0.424, -0.228, 0.466, -0.235,
    0.436, -0.199, 0.424, -0.228, 0.452, -0.213,
    1.0, 0.857, 0.353, 0.28, 1.0, -0.139,
    0.466, -0.235, 0.424, -0.228, 0.477, -0.261,
    0.284, -0.538, 0.477, -0.261, 0.361, -0.235,
    0.327, 0.291, 1.0, 0.857, -0.561, 0.857,
    0.538, -0.55, 0.313, -0.568, 0.314, -0.595,
];

#[rustfmt::skip]
static LX_2_TRIANGLES: [f32; 24] = [
    // walkway
    -1.0, 1.0, -1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, -1.0, 1.0, 1.0,
    1.0, -1.0, 0.0, 0.0, 0.0, -1.0,
    0.0, 0.0, 1.0, 1.0, -1.0, 1.0,
];

#[rustfmt::skip]
static CB_1_TRIANGLES: [f32; 228] = [
    // lighthouse
    0.607, 0.554, 0.594, 0.416, 0.712, 0.387,
    0.817, 0.649, 0.694, 0.659, 0.607, 0.554,
    0.712, 0.387, 0.594, 0.416, 0.653, 0.377,
    0.75, 0.374, 0.793, 0.342, 0.894, 0.467,
    0.712, 0.387, 0.894, 0.467, 0.817, 0.649,
    0.894, 0.467, 0.712, 0.387, 0.75, 0.374,
    0.712, 0.387, 0.817, 0.649, 0.607, 0.554,

    // top-left
    -0.643, 0.605, -0.837, 0.46, -0.593, 0.542,
    -0.611, 0.612, -0.643, 0.605, -0.593, 0.542,
    -0.837, 0.46, -0.643, 0.605, -0.768, 0.625,
    -0.643, 0.605, -0.662, 0.634, -0.768, 0.625,
    -0.593, 0.542, -0.837, 0.46, -0.751, 0.294,
    -0.37, 0.429, -0.418, 0.524, -0.378, 0.365,
    -0.418, 0.524, -0.37, 0.429, -0.391, 0.519,
    -0.593, 0.542, -0.418, 0.524, -0.412, 0.592,
    -0.418, 0.524, -0.593, 0.542, -0.378, 0.365,
    -0.378, 0.365, -0.593, 0.542, -0.751, 0.294,

    // pier-left
    -0.16, 0.519, -0.132, 0.431, -0.055, 0.549,
    -0.023, 0.452, -0.055, 0.549, -0.132, 0.431,

    // pier-right
    0.089, 0.62, 0.009, 0.414, 0.164, 0.554,
    0.089, 0.62, -0.047, 0.567, 0.009, 0.414,
    -0.062, 0.684, 0.039, 0.645, 0.061, 0.722,
    0.039, 0.645, -0.062, 0.684, -0.058, 0.614,
    0.077, 0.765, 0.061, 0.722, 0.117, 0.645,
    0.093, 0.649, 0.061, 0.722, 0.039, 0.645,
    0.117, 0.645, 0.061, 0.722, 0.093, 0.649,
    0.039, 0.645, 0.057, 0.635, 0.093, 0.649,
    0.164, 0.554, 0.009, 0.414, 0.178, 0.549,
    0.186, 0.584, 0.188, 0.56, 0.302, 0.459,
    0.302, 0.459, 0.188, 0.56, 0.178, 0.549,
    0.186, 0.584, 0.302, 0.459, 0.247, 0.819,
    0.009, 0.414, 0.302, 0.459, 0.178, 0.549,
    0.107, 0.62, 0.089, 0.62, 0.124, 0.615,
    0.134, 0.632, 0.163, 0.617, 0.247, 0.819,
    0.247, 0.819, 0.163, 0.617, 0.186, 0.584,
    0.134, 0.632, 0.247, 0.819, 0.117, 0.645,
    0.117, 0.645, 0.247, 0.819, 0.077, 0.765,
    0.124, 0.615, 0.089, 0.62, 0.164, 0.554,
];
